#! /usr/bin/env ruby
# coding: utf-8

require "pp"
require "optparse"
require "rubygems"
require "tefil"

# option analysis
OPTIONS = {}
op = OptionParser.new
#op.banner = [
#    "Usage: #{File.basename("#{__FILE__}")} [options] [files]",
#].join("\n")
op.on("-o"     , "--overwrite"     , "Overwrite."){    OPTIONS[:overwrite] = true}
#op.on("-m", "--minimum", "Show only minimum indent (not zero)."){ OPTIONS[:minimum] = true}
#op.on("-l"     , "--left-alline"   , "Left alline."){ OPTIONS[:left] = true}
op.parse!(ARGV)

module Tefil
  def self.process_stream(in_io, out_io)

    #pp FROM_WIDTH
    #pp TO_WIDTH
    #pp FROM_CHAR
    #pp TO_CHAR
    #if ((FROM_WIDTH == TO_WIDTH) && (FROM_CHAR == TO_CHAR))
    #    puts "File not change. Exit"
    #    return
    #end

    in_io.readlines.each do |line|
      /^(#{FROM_CHAR}*)(.*)$/ =~ line
      indent = $1
      body = $2
      #pp indent

      new_width = indent.size * TO_WIDTH / FROM_WIDTH
      out_io.puts "#{TO_CHAR * new_width}#{body}"
    end
  end
end

#数値として識別できない文字列(to_i で 0 になる)はタブにする。
num = ARGV.shift.to_i
if num == 0
  FROM_WIDTH = 1
  FROM_CHAR  = "\t"
else
  FROM_WIDTH = num
  FROM_CHAR  = ' '
end

num = ARGV.shift.to_i
if num == 0
  TO_WIDTH = 1
  TO_CHAR  = "\t"
else
  TO_WIDTH = num
  TO_CHAR  = ' '
end

OPTIONS[:overwrite] ||= false

Tefil.run(ARGV, OPTIONS[:overwrite])
